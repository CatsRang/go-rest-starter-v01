package main

import (
	"context"
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/spf13/cobra"

	"go_ex01/pkg/api/handler"
	"go_ex01/pkg/api/service"
	"go_ex01/pkg/config"
	"go_ex01/pkg/util"
)

var (
	configPath string
	rootCmd    = &cobra.Command{
		Use:   "go_ex01-api",
		Short: "Example REST API server",
		Long:  "A simple go_ex01 demonstrating Go REST API with Echo, Viper, Cobra, and slog",
		Run:   run,
	}
)

func init() {
	rootCmd.Flags().StringVarP(&configPath, "config", "c", "configs/config.yaml", "Path to config file")
	cobra.OnInitialize(initConfig)
}

func initConfig() {
	cfg := config.Get()
	if err := cfg.Load(configPath); err != nil {
		fmt.Printf("Error loading config: %v\n", err)
		os.Exit(1)
	}

	util.InitLogger(cfg.Log.Level)
	slog.Info("Configuration loaded", "config_path", configPath)
}

func run(cmd *cobra.Command, args []string) {
	cfg := config.Get()

	e := echo.New()
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())

	userService := service.NewUserService()
	userHandler := handler.NewUserHandler(userService)

	api := e.Group("/api/v1")
	userHandler.RegisterRoutes(api)

	go func() {
		addr := fmt.Sprintf("%s:%d", cfg.Server.Host, cfg.Server.Port)
		slog.Info("Starting server", "address", addr)
		if err := e.Start(addr); err != nil {
			slog.Error("Server failed to start", "error", err)
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	slog.Info("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := e.Shutdown(ctx); err != nil {
		slog.Error("Server forced to shutdown", "error", err)
	}
	slog.Info("Server exited")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}
}
