package util

import (
	"errors"
	"log/slog"
	"sync"
	"time"
)

type CircuitState int

const (
	StateClosed CircuitState = iota
	StateOpen
	StateHalfOpen
)

type CircuitBreaker struct {
	name            string
	maxFailures     int
	resetTimeout    time.Duration
	failureCount    int
	lastFailureTime time.Time
	state           CircuitState
	mutex           sync.RWMutex
	logger          *slog.Logger
}

func NewCircuitBreaker(name string, maxFailures int, resetTimeout time.Duration) *CircuitBreaker {
	logger := GetLogger().With("component", "circuit_breaker", "name", name)

	return &CircuitBreaker{
		name:         name,
		maxFailures:  maxFailures,
		resetTimeout: resetTimeout,
		state:        StateClosed,
		logger:       logger,
	}
}

func (cb *CircuitBreaker) Call(fn func() error) error {
	if !cb.allowRequest() {
		return errors.New("circuit breaker is open")
	}

	err := fn()
	cb.recordResult(err)
	return err
}

func (cb *CircuitBreaker) allowRequest() bool {
	cb.mutex.Lock()
	defer cb.mutex.Unlock()

	switch cb.state {
	case StateClosed:
		return true
	case StateOpen:
		if time.Since(cb.lastFailureTime) >= cb.resetTimeout {
			cb.state = StateHalfOpen
			cb.logger.Info("Circuit breaker transitioning to half-open")
			return true
		}
		return false
	case StateHalfOpen:
		return true
	default:
		return false
	}
}

func (cb *CircuitBreaker) recordResult(err error) {
	cb.mutex.Lock()
	defer cb.mutex.Unlock()

	if err != nil {
		cb.failureCount++
		cb.lastFailureTime = time.Now()

		if cb.state == StateHalfOpen {
			cb.state = StateOpen
			cb.logger.Warn("Circuit breaker opened from half-open due to failure")
		} else if cb.failureCount >= cb.maxFailures {
			cb.state = StateOpen
			cb.logger.Warn("Circuit breaker opened due to max failures",
				"failures", cb.failureCount, "max", cb.maxFailures)
		}
	} else {
		// Success
		if cb.state == StateHalfOpen {
			cb.reset()
			cb.logger.Info("Circuit breaker closed after successful half-open call")
		}
	}
}

func (cb *CircuitBreaker) reset() {
	cb.failureCount = 0
	cb.state = StateClosed
}

func (cb *CircuitBreaker) GetState() CircuitState {
	cb.mutex.RLock()
	defer cb.mutex.RUnlock()
	return cb.state
}

func (cb *CircuitBreaker) GetFailureCount() int {
	cb.mutex.RLock()
	defer cb.mutex.RUnlock()
	return cb.failureCount
}